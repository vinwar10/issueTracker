from django.http import HttpResponse
from hamcrest import contains
from django.shortcuts import render, get_object_or_404
from issueTracker.settings import INVITE_HEADER_URL, SITE_HOST
from ..models import *
from .serializer import *
from rest_framework.response import Response
from rest_framework import permissions,viewsets,status,generics
from rest_framework.permissions import IsAuthenticated,BasePermission,IsAdminUser
from rest_framework.authentication import *
from rest_framework.authtoken.models import Token
#from django.contrib.auth.models import User
from django.utils.crypto import get_random_string
from knox.models import AuthToken
from django.utils.text import slugify
#from issues.api import serializer

###
### All register related 
###

class RegisterViewAPI(generics.GenericAPIView):
    permission_classes = ()
    serializer_class = RegisterSerializer

    def post(self, request, *args, **kwargs):
        serializer = self.get_serializer(data=request.data)
        serializer.is_valid(raise_exception=True)
        user = serializer.save()
        return Response({
        "user": UserSerializer(user, context=self.get_serializer_context()).data,
        "token": AuthToken.objects.create(user)[1]
        })



###
### All user related 
###

class UserViewPermission(BasePermission):
    def has_object_permission(self, request, view, obj):
        userid = view.kwargs.get('pk')
        if request.method in permissions.SAFE_METHODS:
            return True
        else:
            if(int(request.user.id) == int(userid) or (request.user and request.user.is_superuser)):
                return True
            return False

class UserViewSet(viewsets.ModelViewSet):
    permission_classes = (IsAuthenticated,UserViewPermission)
    queryset = User.objects.all()
    serializer_class = UserSerializer


###
### All Project related
###

class ProjectUserTeamPermission(permissions.BasePermission):
    message = 'Not accessible'
    def has_object_permission(self, request, view, obj):
        if request.method in permissions.SAFE_METHODS:
            return True
        else:
            if (request.user and request.user.is_superuser):
                return True
            proj = request.user.projects.all()
            return obj in proj

class ProjectViewSet(viewsets.ModelViewSet):
    permission_classes = (IsAuthenticated,ProjectUserTeamPermission)
    queryset = Projects.objects.all()
    serializer_class = ProjectsSerializer

    def perform_create(self, serializer):
        project = serializer.save()
        project.user_team.add(self.request.user)
        project.save()


###
### All issue related
### 
class IssueProjectUserPermission(permissions.BasePermission):
    message = 'Not accessible'
    def has_object_permission(self, request, view, obj):
        if request.method in permissions.SAFE_METHODS:
            return True
        else:
            if (request.user and request.user.is_superuser):
                return True
            ## check if issue generated by user is in user projects
            projs = request.user.projects.all()
            if(obj.project in projs):
                return True
            return False

class IssueViewSet(viewsets.ModelViewSet):
    permission_classes = (IsAuthenticated,IssueProjectUserPermission)
    queryset = Issues.objects.all()
    serializer_class = IssueSerializer

    def perform_create(self, serializer):
        serializer.save(composer = self.request.user)
    
    def create(self, request, *args, **kwargs):
        req_proj_id = int(request.data['project'])
        flag = False
        projss = self.request.user.projects.all()
        
        for item in projss:
            if (req_proj_id == item.id):
                flag = True
                break
        
        if(flag):
            serializer = self.get_serializer(data=request.data)
            serializer.is_valid(raise_exception=True)
            self.perform_create(serializer)
            headers = self.get_success_headers(serializer.data)
            return Response(serializer.data, status=status.HTTP_201_CREATED, headers=headers)
        return HttpResponse("Post data not valid")
        

class InviteViewPermission(BasePermission):
    def has_permission(self, request, view):
        if(request.user and request.user.is_superuser):
            return True
        return False


class InviteViewSet(viewsets.ModelViewSet):
    queryset = Invite.objects.all()
    serializer_class = InviteSerializer
    permission_classes = (IsAuthenticated,IsAdminUser)

    def perform_create(self, serializer):
        string = getUniqueString()
        serializer.save(slug = string,url = SITE_HOST + INVITE_HEADER_URL + string)

def getUniqueString():
    string = get_random_string(length=30)
    flag = False
    for invite in Invite.objects.all():
        if(string == invite.slug):
            flag = True
    if(flag):
        return getUniqueString()
    else: 
        return string

def invite_action(request,slug):
    invite = get_object_or_404(Invite,slug=slug)
    if(int(request.user.id) == int(invite.invitee.id)):
        proj = Projects.objects.get(id = invite.project.id)
        inviteList = Invite.objects.all()
        if(invite.operation == "ADD"):
            proj.user_team.add(invite.invitee)
            inviteList.filter(id = invite.id).delete()
            return HttpResponse("You have been added to new project ")
        if(invite.operation == "DELETE"):
            proj.user_team.remove(invite.invitee)
            inviteList.filter(id = invite.id).delete()
            return HttpResponse("You have been removed from project ")
    else:
        return HttpResponse("NOT DESIRED USER")
    return HttpResponse("INVALID")